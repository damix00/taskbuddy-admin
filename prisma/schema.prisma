generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model blocks {
  id                          BigInt   @id @default(autoincrement())
  blocker                     BigInt
  blocked                     BigInt
  created_at                  DateTime @default(now()) @db.Timestamp(6)
  users_blocks_blockedTousers users    @relation("blocks_blockedTousers", fields: [blocked], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users_blocks_blockerTousers users    @relation("blocks_blockerTousers", fields: [blocker], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model channels {
  id                                  BigInt            @id @default(autoincrement())
  uuid                                String            @unique @db.VarChar(1024)
  created_by_id                       BigInt
  recipient_id                        BigInt
  post_id                             BigInt
  status                              Int               @default(0)
  negotiated_price                    Float
  negotiated_date                     DateTime          @db.Timestamp(6)
  sharing_location                    Boolean           @default(false)
  last_message_time                   DateTime          @default(now()) @db.Timestamp(6)
  created_at                          DateTime          @default(now()) @db.Timestamp(6)
  updated_at                          DateTime          @default(now()) @db.Timestamp(6)
  users_channels_created_by_idTousers users             @relation("channels_created_by_idTousers", fields: [created_by_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users_channels_recipient_idTousers  users             @relation("channels_recipient_idTousers", fields: [recipient_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  job_completions                     job_completions[]
  messages                            messages[]
}

model follows {
  id                             BigInt   @id @default(autoincrement())
  follower                       BigInt
  following                      BigInt
  created_at                     DateTime @default(now()) @db.Timestamp(6)
  users_follows_followerTousers  users    @relation("follows_followerTousers", fields: [follower], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users_follows_followingTousers users    @relation("follows_followingTousers", fields: [following], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model job_completions {
  id                                            BigInt   @id @default(autoincrement())
  channel_id                                    BigInt
  post_id                                       BigInt
  completed_for_id                              BigInt
  completed_by_id                               BigInt
  completed_at                                  DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamp(6)
  created_at                                    DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamp(6)
  updated_at                                    DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamp(6)
  channels                                      channels @relation(fields: [channel_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_job_completions_completed_by_idTousers  users    @relation("job_completions_completed_by_idTousers", fields: [completed_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_job_completions_completed_for_idTousers users    @relation("job_completions_completed_for_idTousers", fields: [completed_for_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model killswitches {
  id          BigInt   @id @default(autoincrement())
  type        String   @db.VarChar(256)
  description String   @db.VarChar(512)
  enabled     Boolean  @default(true)
  added_by    BigInt
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  users       users    @relation(fields: [added_by], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([added_by], map: "idx_killswitches_added_by")
  @@index([enabled], map: "idx_killswitches_enabled")
  @@index([type], map: "idx_killswitches_type")
}

model logins {
  id                  BigInt                @id @default(autoincrement())
  user_id             BigInt
  created_at          DateTime              @default(now()) @db.Timestamp(6)
  ip_address          String                @db.VarChar(512)
  user_agent          String                @db.VarChar(1024)
  is_online           Boolean               @default(true)
  last_updated_online DateTime              @default(now()) @db.Timestamp(6)
  users               users                 @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  notification_tokens notification_tokens[]

  @@index([user_id], map: "idx_logins_user_id")
}

model message_attachments {
  id              BigInt   @id @default(autoincrement())
  message_id      BigInt
  attachment_type Int
  attachment_url  String   @db.VarChar(1024)
  thumbnail_url   String?  @db.VarChar(1024)
  created_at      DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamp(6)
  updated_at      DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamp(6)
  messages        messages @relation(fields: [message_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model messages {
  id                  BigInt                @id @default(autoincrement())
  uuid                String                @unique @db.VarChar(1024)
  channel_id          BigInt
  sender_id           BigInt?
  system_message      Boolean               @default(false)
  message             String
  seen                Boolean               @default(false)
  seen_at             DateTime?             @db.Timestamp(6)
  edited              Boolean               @default(false)
  edited_at           DateTime?             @db.Timestamp(6)
  created_at          DateTime              @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamp(6)
  updated_at          DateTime              @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamp(6)
  deleted             Boolean               @default(false)
  message_attachments message_attachments[]
  channels            channels              @relation(fields: [channel_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users               users?                @relation(fields: [sender_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  request_messages    request_messages[]
}

model notification_tokens {
  id         BigInt   @id @default(autoincrement())
  user_id    BigInt
  login_id   BigInt
  token      String   @db.VarChar(2048)
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  logins     logins   @relation(fields: [login_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users      users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model post_categories {
  category_id    BigInt           @id @default(autoincrement())
  translations   Json             @db.Json
  created_at     DateTime         @default(now()) @db.Timestamp(6)
  updated_at     DateTime         @default(now()) @db.Timestamp(6)
  post_tags      post_tags[]
  user_interests user_interests[]
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model post_interaction_logs {
  user_id          Int
  post_id          Int
  interaction_type Int
  interaction_ip   String
  created_at       DateTime @default(now()) @db.Timestamp(6)

  @@ignore
}

model post_interactions {
  id          BigInt  @id @default(autoincrement())
  likes       BigInt  @default(0)
  comments    BigInt  @default(0)
  shares      BigInt  @default(0)
  bookmarks   BigInt  @default(0)
  impressions BigInt  @default(0)
  posts       posts[]
}

model post_location {
  id                BigInt  @id @default(autoincrement())
  remote            Boolean @default(false)
  lat               Float?
  lon               Float?
  approx_lat        Float?
  approx_lon        Float?
  suggestion_radius Float?
  location_name     String?
  posts             posts[]
}

model post_media {
  id      BigInt @id @default(autoincrement())
  post_id BigInt
  media   String
  type    String
}

model post_removals {
  id             BigInt  @id @default(autoincrement())
  removed        Boolean @default(false)
  removal_reason String?
  flagged        Boolean @default(false)
  flagged_reason String?
  shadow_banned  Boolean @default(false)
  posts          posts[]
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model post_tag_relationship {
  post_id   BigInt?
  tag_id    BigInt?
  post_tags post_tags? @relation(fields: [tag_id], references: [tag_id], onDelete: NoAction, onUpdate: NoAction)

  @@ignore
}

model post_tags {
  tag_id                BigInt                  @id @default(autoincrement())
  category_id           BigInt                  @default(autoincrement())
  translations          Json                    @db.Json
  created_at            DateTime                @default(now()) @db.Timestamp(6)
  updated_at            DateTime                @default(now()) @db.Timestamp(6)
  post_tag_relationship post_tag_relationship[] @ignore
  post_categories       post_categories         @relation(fields: [category_id], references: [category_id], onDelete: NoAction, onUpdate: NoAction)
}

model posts {
  id                  BigInt                @id @default(autoincrement())
  uuid                String                @unique @db.VarChar(1024)
  user_id             BigInt
  title               String                @db.VarChar(256)
  title_vector        Unsupported("vector")
  classified_category Int
  description         String
  job_type            Int
  price               Float
  removals_id         BigInt
  post_location_id    BigInt
  interactions_id     BigInt
  start_date          DateTime              @db.Timestamp(6)
  end_date            DateTime              @db.Timestamp(6)
  urgent              Boolean               @default(false)
  status              Int
  reserved            Boolean               @default(false)
  created_at          DateTime              @default(now()) @db.Timestamp(6)
  updated_at          DateTime              @default(now()) @db.Timestamp(6)
  post_interactions   post_interactions     @relation(fields: [interactions_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  post_location       post_location         @relation(fields: [post_location_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  post_removals       post_removals         @relation(fields: [removals_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users               users                 @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model profiles {
  id                    BigInt   @id @default(autoincrement())
  user_id               BigInt
  created_at            DateTime @default(now()) @db.Timestamp(6)
  updated_at            DateTime @default(now()) @db.Timestamp(6)
  profile_picture       String?
  bio                   String
  rating_employer       Decimal  @default(0) @db.Decimal
  rating_employee       Decimal  @default(0) @db.Decimal
  rating_count_employer Int      @default(0)
  rating_count_employee Int      @default(0)
  cancelled_employer    Int      @default(0)
  cancelled_employee    Int      @default(0)
  completed_employer    Int      @default(0)
  completed_employee    Int      @default(0)
  followers             BigInt   @default(0)
  following             BigInt   @default(0)
  post_count            BigInt   @default(0)
  location_text         String?
  location_lat          Decimal? @db.Decimal
  location_lon          Decimal? @db.Decimal
  is_private            Boolean  @default(false)
  deleted               Boolean  @default(false)
  rating_sum_employer   Float    @default(0)
  rating_sum_employee   Float    @default(0)
  users                 users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([user_id])
}

model request_messages {
  id           BigInt   @id @default(autoincrement())
  message_id   BigInt
  status       Int      @default(0)
  request_type Int
  data         String?
  created_at   DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamp(6)
  updated_at   DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamp(6)
  messages     messages @relation(fields: [message_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model reviews {
  id                                 BigInt   @id @default(autoincrement())
  uuid                               String   @unique @db.VarChar(1024)
  type                               Int
  user_id                            BigInt
  rating_for_id                      BigInt
  post_id                            BigInt
  post_title                         String
  rating                             Float
  title                              String
  description                        String
  created_at                         DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamp(6)
  updated_at                         DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamp(6)
  users_reviews_rating_for_idTousers users    @relation("reviews_rating_for_idTousers", fields: [rating_for_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_reviews_user_idTousers       users    @relation("reviews_user_idTousers", fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model scroll_sessions {
  id            BigInt          @id @default(autoincrement())
  user_id       BigInt
  ip_address    String          @db.VarChar(512)
  lat           Float?
  lon           Float?
  filters       String?
  created_at    DateTime        @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamp(6)
  updated_at    DateTime        @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamp(6)
  session_posts session_posts[]
}

model session_posts {
  id                BigInt          @id @default(autoincrement())
  scroll_session_id BigInt
  post_id           BigInt
  created_at        DateTime        @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamp(6)
  updated_at        DateTime        @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamp(6)
  scroll_sessions   scroll_sessions @relation(fields: [scroll_session_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model socket_io_attachments {
  id         BigInt    @unique @default(autoincrement())
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  payload    Bytes?
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model spatial_ref_sys {
  srid      Int     @id
  auth_name String? @db.VarChar(256)
  auth_srid Int?
  srtext    String? @db.VarChar(2048)
  proj4text String? @db.VarChar(2048)
}

model user_interests {
  id              BigInt          @id @default(autoincrement())
  user_id         BigInt
  category_id     BigInt
  weight          Float
  created_at      DateTime        @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamp(6)
  updated_at      DateTime        @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamp(6)
  post_categories post_categories @relation(fields: [category_id], references: [category_id], onDelete: NoAction, onUpdate: NoAction)
  users           users           @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user_reports {
  id           BigInt      @id @default(autoincrement())
  user_id      BigInt
  content_type Int
  content_id   BigInt   @default(autoincrement())
  reason       String
  reviewed     Boolean  @default(false)
  verdict      Boolean  @default(false)
  reviewed_by  BigInt   @default(autoincrement())
  created_at   DateTime @default(now()) @db.Timestamp(6)
  updated_at   DateTime @default(now()) @db.Timestamp(6)
  users        users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model users {
  id                                                      BigInt                     @id @default(autoincrement())
  uuid                                                    String                     @unique @db.VarChar(1024)
  username                                                String                     @unique @db.VarChar(255)
  email                                                   String                     @unique @db.VarChar(255)
  email_verified                                          Boolean                    @default(false)
  phone_number                                            String                     @unique @db.VarChar(255)
  phone_number_verified                                   Boolean                    @default(false)
  first_name                                              String                     @db.VarChar(255)
  last_name                                               String                     @db.VarChar(255)
  password_hash                                           String
  created_at                                              DateTime                   @default(now()) @db.Timestamp(6)
  updated_at                                              DateTime                   @default(now()) @db.Timestamp(6)
  last_login                                              DateTime                   @default(now()) @db.Timestamp(6)
  role                                                    String                     @default("user") @db.VarChar(255)
  token_version                                           BigInt?                    @default(1)
  auth_provider                                           String                     @default("taskbuddy") @db.VarChar(255)
  deleted                                                 Boolean                    @default(false)
  has_premium                                             Boolean                    @default(false)
  verified                                                Boolean                    @default(false)
  limited_access                                          String[]
  blocks_blocks_blockedTousers                            blocks[]                   @relation("blocks_blockedTousers")
  blocks_blocks_blockerTousers                            blocks[]                   @relation("blocks_blockerTousers")
  channels_channels_created_by_idTousers                  channels[]                 @relation("channels_created_by_idTousers")
  channels_channels_recipient_idTousers                   channels[]                 @relation("channels_recipient_idTousers")
  follows_follows_followerTousers                         follows[]                  @relation("follows_followerTousers")
  follows_follows_followingTousers                        follows[]                  @relation("follows_followingTousers")
  job_completions_job_completions_completed_by_idTousers  job_completions[]          @relation("job_completions_completed_by_idTousers")
  job_completions_job_completions_completed_for_idTousers job_completions[]          @relation("job_completions_completed_for_idTousers")
  killswitches                                            killswitches[]
  logins                                                  logins[]
  messages                                                messages[]
  notification_tokens                                     notification_tokens[]
  posts                                                   posts[]
  profiles                                                profiles[]
  reviews_reviews_rating_for_idTousers                    reviews[]                  @relation("reviews_rating_for_idTousers")
  reviews_reviews_user_idTousers                          reviews[]                  @relation("reviews_user_idTousers")
  user_interests                                          user_interests[]
  user_reports                                            user_reports[]
  view_history                                            view_history[]             @ignore

  @@index([email], map: "idx_users_email")
  @@index([username], map: "idx_users_username")
  @@index([uuid], map: "idx_users_uuid")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model view_history {
  user_id    BigInt
  post_id    BigInt
  created_at DateTime @default(now()) @db.Timestamp(6)
  users      users    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@ignore
}
